#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019_05_05_ist-daten-sbb.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019_05_05_ist-daten-sbb.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
# call function
stat_delay <- delays_per_station(data_delay, vec)
View(data_delay)
View(data_delay)
str(data_delay)
data_delay$ABFAHRTSZEIT <- as.Date(data_delay$ABFAHRTSZEIT, "%d.%m.%Y %H:%M")
data_delay$AB_PROGNOSE <- as.Date(data_delay$AB_PROGNOSE, "%d.%m.%Y %H:%M:%S")
# call function
stat_delay <- delays_per_station(data_delay, vec)
str(data_delay)
x <- data_delay$ABFAHRTSZEIT - data_delay$AB_PROGNOSE
#my_table$End <- as.POSIXct(my_table$End, format = '%d%b%Y:%H:%M:%S')
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M')
str(data_delay)
#my_table$End <- as.POSIXct(my_table$End, format = '%d%b%Y:%H:%M:%S')
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M')
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S')
str(data_delay)
x <- data_delay$ABFAHRTSZEIT - data_delay$AB_PROGNOSE
#my_table$End <- as.POSIXct(my_table$End, format = '%d%b%Y:%H:%M:%S')
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M')
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S')
str(data_delay)
x <- data_delay$ABFAHRTSZEIT - data_delay$AB_PROGNOSE
str(data_delay$ABFAHRTSZEIT)
View(data_delay)
str(data_delay$ABFAHRTSZEIT)
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M')
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S')
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M')
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S')
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
x <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE)
x <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE)
t <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE)
t <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins")
str(data_delay)
View(data_delay)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
t <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins")
x <- data_delay$ABFAHRTSZEIT - data_delay$AB_PROGNOSE
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
t <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins")
x <- data_delay$ABFAHRTSZEIT - data_delay$AB_PROGNOSE
t
View(data_delay)
t <- difftime(data_delay$AB_PROGNOSE, data_delay$ABFAHRTSZEIT, units="mins")
t
arr_diff <- difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins")
dep_diff <- difftime(data_delay$AB_PROGNOSE, data_delay$ABFAHRTSZEIT, units="mins")
arr_diff <- difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins")
dep_diff
arr_diff
dep_diff <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins")
arr_diff <- difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins")
dep_diff <- difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins")
arr_diff <- difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins")
if (dep_diff > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL'){
dep_diff <- TRUE
} else{
dep_diff <- FALSE
}
abfahrtsverspatung = vector(,ncol(data_delay))
abfahrtsverspatung
nrow(data_delay)
abfahrtsverspatung = vector(,nrow(data_delay))
abfahrtsverspatung <- vector(,nrow(data_delay))
ankunftsverspatung <- vector(,nrow(data_delay))
abfahrtsverspatung <- vector(,nrow(data_delay))
ankunftsverspatung <- vector(,nrow(data_delay))
index_dep <- data_delay[which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL'),];
View(index_dep)
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung[index_dep] <- c('true')
abfahrtsverspatung
abfahrtsverspatung[-index_dep] <- c('true')
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- vector(,nrow(data_delay))
ankunftsverspatung <- vector(,nrow(data_delay))
abfahrtsverspatung[index_dep] <- c('true')
replace(abfahrtsverspatung, abfahrtsverspatung==FALSE, 'false')
hist(abfahrtsverspatung)
count(abfahrtsverspatung)
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
library(dplyr);
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- vector(,nrow(data_delay))
ankunftsverspatung <- vector(,nrow(data_delay))
abfahrtsverspatung[index_dep] <- c('true')
replace(abfahrtsverspatung, abfahrtsverspatung==FALSE, 'false')
count(abfahrtsverspatung)
ankunftsverspatung[index_arr] <- c('true')
replace(ankunftsverspatung, ankunftsverspatung==FALSE, 'false')
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung)
View(data_delay)
# call function
stat_delay <- delays_per_station(data_delay, vec)
stat_geopos <- stations_with_geopos(data_geopos, c('BPUIC', 'geopos'))
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, stat_geopos, by = 'BPUIC');
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export Dataset
write.csv2(data_S, 'Output/s_output.csv', row.names = F)
write.csv2(data_IC, 'Output/ic_output.csv', row.names = F)
write.csv2(data_IR, 'Output/ir_output.csv', row.names = F)
# Export Dataset
write.csv2(data_S, 'Output/s_output.csv', row.names = F)
write.csv2(data_IC, 'Output/ic_output.csv', row.names = F)
write.csv2(data_IR, 'Output/ir_output.csv', row.names = F)
write.csv2(stat_delay_geopos, 'Output/stat_delay_output.csv', row.names = F)
View(stat_delay_geopos)
View(data_delay)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[ which(data_delay$PRODUKT_ID == 'Zug'),];
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[ which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- vector(,nrow(data_delay))
ankunftsverspatung <- vector(,nrow(data_delay))
abfahrtsverspatung[index_dep] <- c('true')
replace(abfahrtsverspatung, abfahrtsverspatung==FALSE, 'false')
ankunftsverspatung[index_arr] <- c('true')
replace(ankunftsverspatung, ankunftsverspatung==FALSE, 'false')
abfahrtsverspatung[index_dep] <- c('true');
replace(abfahrtsverspatung, abfahrtsverspatung==FALSE, 'false');
ankunftsverspatung[index_arr] <- c('true');
replace(ankunftsverspatung, ankunftsverspatung==FALSE, 'false');
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung);
# call function
stat_delay <- delays_per_station(data_delay, vec)
stat_geopos <- stations_with_geopos(data_geopos, c('BPUIC', 'geopos'))
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, stat_geopos, by = 'BPUIC');
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export Dataset
write.csv2(data_S, 'Output/s_output.csv', row.names = F)
write.csv2(data_IC, 'Output/ic_output.csv', row.names = F)
write.csv2(data_IR, 'Output/ir_output.csv', row.names = F)
write.csv2(stat_delay_geopos, 'Output/stat_delay_output.csv', row.names = F)
View(stat_delay_geopos)
data <- data_delay
index <- match(unique(data$BPUIC), data$BPUIC);
# Get statistics of kind of delay per BP
stat <- data.frame(count(data, BPUIC, ankunftsverspatung, abfahrtsverspatung));
View(stat)
View(stat)
abfahrtsverspatung <- vector(,nrow(data_delay));
ankunftsverspatung <- vector(,nrow(data_delay));
abfahrtsverspatung[index_dep] <- c('true');
replace(abfahrtsverspatung, abfahrtsverspatung==FALSE, 'false');
ankunftsverspatung[index_arr] <- c('true');
replace(ankunftsverspatung, ankunftsverspatung==FALSE, 'false');
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung);
data <- data_delay
index <- match(unique(data$BPUIC), data$BPUIC);
# Get statistics of kind of delay per BP
stat <- data.frame(count(data, BPUIC, ankunftsverspatung, abfahrtsverspatung));
View(stat)
abfahrtsverspatung <- replicate(nrow(data_delay), 'flase');
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- replicate(nrow(data_delay), 'flase');
ankunftsverspatung <- replicate(nrow(data_delay), 'flase');
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- replicate(nrow(data_delay), 'flase');
ankunftsverspatung <- replicate(nrow(data_delay), 'flase');
abfahrtsverspatung[index_dep] <- c('true');
ankunftsverspatung[index_arr] <- c('true');
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung);
View(data_delay)
View(data_delay)
abfahrtsverspatung <- replicate(nrow(data_delay), 'false');
ankunftsverspatung <- replicate(nrow(data_delay), 'false');
abfahrtsverspatung[index_dep] <- c('true');
ankunftsverspatung[index_arr] <- c('true');
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung);
data <- data_delay
# call function
stat_delay <- delays_per_station(data_delay, vec)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
index_dep <- which(difftime(data_delay$ABFAHRTSZEIT, data_delay$AB_PROGNOSE, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$ANKUNFTSZEIT, data_delay$AN_PROGNOSE, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- replicate(nrow(data_delay), 'false');
ankunftsverspatung <- replicate(nrow(data_delay), 'false');
abfahrtsverspatung[index_dep] <- c('true');
ankunftsverspatung[index_arr] <- c('true');
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung);
# call function
stat_delay <- delays_per_station(data_delay, vec)
stat_geopos <- stations_with_geopos(data_geopos, c('BPUIC', 'geopos'))
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, stat_geopos, by = 'BPUIC');
View(stat_delay_geopos)
View(stat_delay_geopos)
View(data_delay)
# call function
stat_delay <- delays_per_station(data_delay, vec)
stat_geopos <- stations_with_geopos(data_geopos, c('BPUIC', 'geopos'))
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, stat_geopos, by = 'BPUIC');
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export Dataset
write.csv2(data_S, 'Output/s_output.csv', row.names = F)
View(data_IR)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'data/linie-mit-betriebspunkten_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-05istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
str(data_delay)
# Convert times in to POSIXct
data_delay$ABFAHRTSZEIT <-  as.POSIXct(data_delay$ABFAHRTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AB_PROGNOSE <- as.POSIXct(data_delay$AB_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
data_delay$ANKUNFTSZEIT <-  as.POSIXct(data_delay$ANKUNFTSZEIT, format = '%d.%m.%Y %H:%M');
data_delay$AN_PROGNOSE <- as.POSIXct(data_delay$AN_PROGNOSE, format = '%d.%m.%Y %H:%M:%S');
str(data_delay)
View(data_delay)
index_dep <- which(difftime(data_delay$AB_PROGNOSE, data_delay$ABFAHRTSZEIT, units="mins") > 3 & data_delay$AB_PROGNOSE_STATUS == 'REAL');
index_arr <- which(difftime(data_delay$AN_PROGNOSE, data_delay$ANKUNFTSZEIT, units="mins") > 3 & data_delay$AN_PROGNOSE_STATUS == 'REAL');
abfahrtsverspatung <- replicate(nrow(data_delay), 'false');
ankunftsverspatung <- replicate(nrow(data_delay), 'false');
abfahrtsverspatung[index_dep] <- c('true');
ankunftsverspatung[index_arr] <- c('true');
data_delay <- cbind(data_delay,ankunftsverspatung, abfahrtsverspatung);
# call function
stat_delay <- delays_per_station(data_delay, vec)
stat_geopos <- stations_with_geopos(data_geopos, c('BPUIC', 'geopos'))
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, stat_geopos, by = 'BPUIC');
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export Dataset
write.csv2(data_S, 'Output/s_output.csv', row.names = F)
write.csv2(data_IC, 'Output/ic_output.csv', row.names = F)
write.csv2(data_IR, 'Output/ir_output.csv', row.names = F)
write.csv2(stat_delay_geopos, 'Output/stat_delay_output.csv', row.names = F)
View(stat_delay_geopos)
View(stat_delay_geopos)
