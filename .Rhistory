library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-07istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
vec1 <- c('ABFAHRTSZEIT','AB_PROGNOSE', 'ANKUNFTSZEIT', 'AN_PROGNOSE')
# calculate delays
data_delay <- calculate_delays(data_delay, vec1)
# summarise delays
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
# extract subsets
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
# summarise delays for subset
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export datasets
write.table(data_S, 'Output/s_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(data_IC, 'Output/ic_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(data_IR, 'Output/ir_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(stat_delay_geopos, 'Output/stat_delay_output.csv', sep = ";", dec = ".", row.names = FALSE)
library(leaflet)
locations <- stat_delay_geopos
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste("percent on time=", round(locations$percent_on_time,digits=2)))
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station, "percent on time=", round(locations$percent_on_time,digits=2)))
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station, "/npercent on time=", round(locations$percent_on_time,digits=2)))
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station, "\npercent on time=", round(locations$percent_on_time,digits=2)))
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,'\n' ,"percent on time=", round(locations$percent_on_time,digits=2)))
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
# load library
library(leaflet)
# import data
data_path <- 'data/Output20/stat_delay_output_1.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = True);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output_1.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = True);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output_1.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = True);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
# second label:  "station=",locations$Station
----------------------------------------------
# VISU STOPS
# import data
data_path <- 'data/Output20/stat_delay_output.csv'
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output_1.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = True);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = True);
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = True);
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
source("Map_percent_on_time_gm.R")
# Load Function from external files
source("datahandling.R")
source("Map_percent_on_time_gm.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-07istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
vec1 <- c('ABFAHRTSZEIT','AB_PROGNOSE', 'ANKUNFTSZEIT', 'AN_PROGNOSE')
# calculate delays
data_delay <- calculate_delays(data_delay, vec1)
# summarise delays
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-07istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
vec1 <- c('ABFAHRTSZEIT','AB_PROGNOSE', 'ANKUNFTSZEIT', 'AN_PROGNOSE')
# calculate delays
data_delay <- calculate_delays(data_delay, vec1)
# summarise delays
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
source("Map_percent_on_time_gm.R")
visualize_delays(stat_delay_geopos)
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-07istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
vec1 <- c('ABFAHRTSZEIT','AB_PROGNOSE', 'ANKUNFTSZEIT', 'AN_PROGNOSE')
# calculate delays
data_delay <- calculate_delays(data_delay, vec1)
# summarise delays
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
library(leaflet)
locations <- stat_delay_geopos
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2020-04-21istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
vec1 <- c('ABFAHRTSZEIT','AB_PROGNOSE', 'ANKUNFTSZEIT', 'AN_PROGNOSE')
# calculate delays
data_delay <- calculate_delays(data_delay, vec1)
# summarise delays
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
library(leaflet)
locations <- stat_delay_geopos
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
library(leaflet)
locations <- stat_delay_geopos
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste("percent on time=", round(locations$percent_on_time,digits=2)))
locations$Station <- as.character.factor(locations$Station)
locations$Station <- as.factor(locations$Station)
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste("percent on time=", round(locations$percent_on_time,digits=2)))
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$Station <- as.factor(locations$Station)
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))#paste("percent on time=", round(locations$percent_on_time,digits=2)))
# import data
data_path <- 'Output20/stat_delay_output.csv'
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.table(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv2(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))#paste("percent on time=", round(locations$percent_on_time,digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv2(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
# Define a color pallete corresponding to the punctuality ranges
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$punctualityrange)
# Create the map object & add circle marker with label
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(punctualityrange), label = paste(locations$Station,":", round(locations$percent_on_time,digits=2),'%'))#paste("percent on time=", round(locations$percent_on_time,digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv2(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = TRUE);
# create punctuality range to define the type as follows
locations$punctualityrange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
# import data
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv2(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = TRUE);
location$lat <- as.numeric(location$lat);
location$lon <- as.numeric(location$lon);
location$lat <- as.numeric(as.character(location$lat));
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
source("Map_percent_on_time.R")
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
source("Map_percent_on_time.R")
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2020-04-21istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
vec1 <- c('ABFAHRTSZEIT','AB_PROGNOSE', 'ANKUNFTSZEIT', 'AN_PROGNOSE')
# calculate delays
data_delay <- calculate_delays(data_delay, vec1)
# summarise delays
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
visualize_delays(stat_delay_geopos)
visualize_stops(stat_delay_geopos)
