stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
# extract subsets
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
# summarise delays for subset
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export datasets
write.table(data_S, 'Output20/s_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(data_IC, 'Output20/ic_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(data_IR, 'Output20/ir_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(stat_delay_geopos, 'Output20/stat_delay_output.csv', sep = ";", dec = ".", row.names = FALSE)
Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-07istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# calculate delays if necessary
data_delay <- calculate_delays(data_delay)
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
# call function
stat_delay <- delays_per_station(data_delay, vec)
#stat_geopos <- stations_with_geopos(data_geopos, c('BPUIC', 'geopos'))
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
# extract subsets
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
# summarise delays for subset
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
# Export datasets
write.table(data_S, 'Output19/s_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(data_IC, 'Output19/ic_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(data_IR, 'Output19/ir_output.csv', sep = ";", dec = ".", row.names = FALSE)
write.table(stat_delay_geopos, 'Output19/stat_delay_output.csv', sep = ";", dec = ".", row.names = FALSE)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Station, " percent on time=", round(locations$percent_on_time,digits=2)))
str(locations$Station)
noquote(locations$Station)
str(locations$Station)
View(locations)
locations$Station <- noquote(locations$Station)
View(locations)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  network_analysis_meyj.R
#   Author: Jonas Meyer
#   Date:   05.05.2020    meyj
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# Load Function from external files
source("datahandling.R")
library(dplyr);
# import data
data_path <- 'Data/Betriebspunkte_wgs84.csv';
data_geopos <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_path <- 'Data/2019-05-07istdaten.csv';
data_delay <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
data_delay <- data_delay[which(data_delay$PRODUKT_ID == 'Zug'),];
# calculate delays if necessary
data_delay <- calculate_delays(data_delay)
# Define col names vector
vec <- c('BPUIC','HALTESTELLEN_NAME', 'ankunftsverspatung', 'abfahrtsverspatung')
# call function
stat_delay <- delays_per_station(data_delay, vec)
# Join Dataframes
stat_delay_geopos <- left_join(stat_delay, data_geopos, by = 'BPUIC');
# extract subsets
data_S <- data_delay[which(data_delay$LINIEN_TEXT=='S3'),];
data_IC <- data_delay[which(data_delay$LINIEN_TEXT=='IC61' | data_delay$LINIEN_TEXT=='IC21' | data_delay$LINIEN_TEXT=='ICE' | data_delay$LINIEN_TEXT=='EC' & data_delay$LINIEN_TEXT=='IR26' | data_delay$LINIEN_TEXT=='IC6'),];
data_IR <- data_delay[which(data_delay$LINIEN_TEXT=='IR27'),];
# summarise delays for subset
data_S <- delays_per_station(data_S, vec)
data_IC <- delays_per_station(data_IC, vec)
data_IR <- delays_per_station(data_IR, vec)
View(stat_delay_geopos)
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Staions " percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Staions " percent on time=", round(locations$percent_on_time,digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
locations$Station <- noquote(locations$Station)
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = locations$Stations)#paste(locations$Staions " percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = locations$lon)#paste(locations$Staions " percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = locations$Stations)#paste(locations$Staions " percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Staions, "<br/>percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Stations, "<br/>percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Stations, "percent on time=", round(locations$percent_on_time,digits=2)))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste(locations$Stations, "percent on time=", round(locations$percent_on_time, digits=2)))
popup <- paste(locations$Stations, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = popup)
popup <- paste(locations$lat, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
locations$Station <- noquote(locations$Station)
popup <- paste(locations$lat, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = popup)
popup <- paste(locations$Station, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = popup)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
locations$Station <- noquote(locations$Station)
popup <- paste(locations$Station, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = popup)
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), popup = popup)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
locations$Station <- noquote(locations$Station)
popup <- paste(locations$Station, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), popup = popup)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
popup <- paste(locations$Station, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), popup = popup)
popup <- paste(locations$Station, "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), popup = popup)
popup <- paste( "<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), popup = popup)
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), popup = popup)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = ~htmlEscape(Name))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = ~htmlEscape(locations$Station))
leaflet() %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(data=locations,radius=2,color = ~ pal(ontimerange), label = paste("<br/>percent on time=", round(locations$percent_on_time, digits=2)))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat,radius=2,color = ~ pal(ontimerange), label = paste("<br/>percent on time=", round(locations$percent_on_time, digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = paste("percent on time=", round(locations$percent_on_time, digits=2)))
----------------------------------------------
VISU STOPS
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = ~Station)#paste("percent on time=", round(locations$percent_on_time, digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = ~Station)#paste("percent on time=", round(locations$percent_on_time, digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = ~Station)#paste("percent on time=", round(locations$percent_on_time, digits=2)))
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = paste("percent on time=", round(locations$percent_on_time, digits=2)))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = popup)#paste("percent on time=", round(locations$percent_on_time, digits=2)))
popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
popup <- htmltools::HTML(locations$Station)
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = popup)#paste("percent on time=", round(locations$percent_on_time, digits=2)))
----------------------------------------------
VISU STOPS
#--------------------------------------------------------------------------------------------------------------------------------------------------
#   MobiGI Network Analysis
#
#   Title:  Map_stops_on_time.R
#   Author: Gianna Mueller
#   Date:   23.05.2020    gm
#
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Preliminaries
rm(list=ls(all=TRUE))     # clean the environment
options(scipen=6)         # display digits properly!! not the scientific version
options(digits.secs=6)    # use milliseconds in Date/Time data types
options(warning=FALSE)    # don't show warnings
# load library
library(leaflet)
library(htmltools)
data_path <- 'Output20/stat_delay_output.csv'
locations <- read.csv(data_path, sep = ';', encoding = 'UTF-8', stringsAsFactors = FALSE);
locations$ontimerange = cut(locations$percent_on_time,
breaks = c(0, 80, 85, 90, 92, 94, 96, 101), right=FALSE,
labels = c("a[0-80)", "b[80-85)", "c[85-90)","d[90-92)", "e[92-94)", "f[94-96)", "g[96-101]"))
pal = colorFactor(palette = c("#D7191C", "#F17C4A", "#FEC981","#FFFFC0", "#C4E687", "#77C35C", "#1A9641"), domain=locations$ontimerange)
str(locations$Station)
#popup <- paste("<br/>percent on time=", round(locations$percent_on_time, digits=2))
popup <- htmltools::HTML(locations$Station)
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = popup)#paste("percent on time=", round(locations$percent_on_time, digits=2)))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = paste("percent on time=", round(locations$percent_on_time, digits=2)))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = paste("percent on time = ", round(locations$percent_on_time, digits=2)))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = paste("percent on time = ", round(locations$percent_on_time, digits=2), "%"))
leaflet(locations) %>% addProviderTiles("Esri.WorldTopoMap", group = "Terrain")  %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius=2, color = ~ pal(ontimerange), label = paste("on time = ", round(locations$percent_on_time, digits=2), "%"))
